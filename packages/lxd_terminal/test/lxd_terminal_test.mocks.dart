// Mocks generated by Mockito 5.3.0 from annotations
// in lxd_terminal/test/lxd_terminal_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i14;
import 'dart:io' as _i3;

import 'package:lxd/src/api/certificate.dart' as _i5;
import 'package:lxd/src/api/event.dart' as _i16;
import 'package:lxd/src/api/image.dart' as _i6;
import 'package:lxd/src/api/instance.dart' as _i7;
import 'package:lxd/src/api/instance_state.dart' as _i8;
import 'package:lxd/src/api/network.dart' as _i9;
import 'package:lxd/src/api/network_acl.dart' as _i10;
import 'package:lxd/src/api/operation.dart' as _i2;
import 'package:lxd/src/api/profile.dart' as _i11;
import 'package:lxd/src/api/project.dart' as _i12;
import 'package:lxd/src/api/resource.dart' as _i4;
import 'package:lxd/src/api/storage_pool.dart' as _i13;
import 'package:lxd/src/enums.dart' as _i17;
import 'package:lxd/src/lxd_client.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUri_0 extends _i1.SmartFake implements Uri {
  _FakeUri_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLxdOperation_1 extends _i1.SmartFake implements _i2.LxdOperation {
  _FakeLxdOperation_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebSocket_2 extends _i1.SmartFake implements _i3.WebSocket {
  _FakeWebSocket_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLxdResources_3 extends _i1.SmartFake implements _i4.LxdResources {
  _FakeLxdResources_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLxdCertificate_4 extends _i1.SmartFake
    implements _i5.LxdCertificate {
  _FakeLxdCertificate_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLxdImage_5 extends _i1.SmartFake implements _i6.LxdImage {
  _FakeLxdImage_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLxdInstance_6 extends _i1.SmartFake implements _i7.LxdInstance {
  _FakeLxdInstance_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLxdInstanceState_7 extends _i1.SmartFake
    implements _i8.LxdInstanceState {
  _FakeLxdInstanceState_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLxdNetwork_8 extends _i1.SmartFake implements _i9.LxdNetwork {
  _FakeLxdNetwork_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLxdNetworkState_9 extends _i1.SmartFake
    implements _i9.LxdNetworkState {
  _FakeLxdNetworkState_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLxdNetworkAcl_10 extends _i1.SmartFake
    implements _i10.LxdNetworkAcl {
  _FakeLxdNetworkAcl_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLxdProfile_11 extends _i1.SmartFake implements _i11.LxdProfile {
  _FakeLxdProfile_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLxdProject_12 extends _i1.SmartFake implements _i12.LxdProject {
  _FakeLxdProject_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLxdStoragePool_13 extends _i1.SmartFake
    implements _i13.LxdStoragePool {
  _FakeLxdStoragePool_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_14 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$LxdInstanceCopyWith_15<$Res> extends _i1.SmartFake
    implements _i7.$LxdInstanceCopyWith<$Res> {
  _Fake$LxdInstanceCopyWith_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$LxdOperationCopyWith_16<$Res> extends _i1.SmartFake
    implements _i2.$LxdOperationCopyWith<$Res> {
  _Fake$LxdOperationCopyWith_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_17<T> extends _i1.SmartFake
    implements _i14.StreamSubscription<T> {
  _FakeStreamSubscription_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LxdClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockLxdClient extends _i1.Mock implements _i15.LxdClient {
  MockLxdClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Uri get url => (super.noSuchMethod(
        Invocation.getter(#url),
        returnValue: _FakeUri_0(
          this,
          Invocation.getter(#url),
        ),
      ) as Uri);
  @override
  set userAgent(String? value) => super.noSuchMethod(
        Invocation.setter(
          #userAgent,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Future<Map<String, List<String>>> getOperations() => (super.noSuchMethod(
        Invocation.method(
          #getOperations,
          [],
        ),
        returnValue: _i14.Future<Map<String, List<String>>>.value(
            <String, List<String>>{}),
      ) as _i14.Future<Map<String, List<String>>>);
  @override
  _i14.Future<_i2.LxdOperation> getOperation(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getOperation,
          [id],
        ),
        returnValue: _i14.Future<_i2.LxdOperation>.value(_FakeLxdOperation_1(
          this,
          Invocation.method(
            #getOperation,
            [id],
          ),
        )),
      ) as _i14.Future<_i2.LxdOperation>);
  @override
  _i14.Future<_i3.WebSocket> getOperationWebSocket(
    String? id,
    String? secret,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOperationWebSocket,
          [
            id,
            secret,
          ],
        ),
        returnValue: _i14.Future<_i3.WebSocket>.value(_FakeWebSocket_2(
          this,
          Invocation.method(
            #getOperationWebSocket,
            [
              id,
              secret,
            ],
          ),
        )),
      ) as _i14.Future<_i3.WebSocket>);
  @override
  _i14.Future<_i2.LxdOperation> waitOperation(
    String? id, {
    Duration? timeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #waitOperation,
          [id],
          {#timeout: timeout},
        ),
        returnValue: _i14.Future<_i2.LxdOperation>.value(_FakeLxdOperation_1(
          this,
          Invocation.method(
            #waitOperation,
            [id],
            {#timeout: timeout},
          ),
        )),
      ) as _i14.Future<_i2.LxdOperation>);
  @override
  _i14.Future<void> cancelOperation(String? id) => (super.noSuchMethod(
        Invocation.method(
          #cancelOperation,
          [id],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<_i4.LxdResources> getResources() => (super.noSuchMethod(
        Invocation.method(
          #getResources,
          [],
        ),
        returnValue: _i14.Future<_i4.LxdResources>.value(_FakeLxdResources_3(
          this,
          Invocation.method(
            #getResources,
            [],
          ),
        )),
      ) as _i14.Future<_i4.LxdResources>);
  @override
  _i14.Future<List<String>> getCertificates() => (super.noSuchMethod(
        Invocation.method(
          #getCertificates,
          [],
        ),
        returnValue: _i14.Future<List<String>>.value(<String>[]),
      ) as _i14.Future<List<String>>);
  @override
  _i14.Future<_i5.LxdCertificate> getCertificate(String? fingerprint) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCertificate,
          [fingerprint],
        ),
        returnValue:
            _i14.Future<_i5.LxdCertificate>.value(_FakeLxdCertificate_4(
          this,
          Invocation.method(
            #getCertificate,
            [fingerprint],
          ),
        )),
      ) as _i14.Future<_i5.LxdCertificate>);
  @override
  _i14.Stream<_i16.LxdEvent> getEvents({
    String? project = r'',
    Set<_i16.LxdEventType>? types = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEvents,
          [],
          {
            #project: project,
            #types: types,
          },
        ),
        returnValue: _i14.Stream<_i16.LxdEvent>.empty(),
      ) as _i14.Stream<_i16.LxdEvent>);
  @override
  _i14.Future<List<String>> getImages({
    String? project,
    String? filter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImages,
          [],
          {
            #project: project,
            #filter: filter,
          },
        ),
        returnValue: _i14.Future<List<String>>.value(<String>[]),
      ) as _i14.Future<List<String>>);
  @override
  _i14.Future<_i6.LxdImage> getImage(String? fingerprint) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImage,
          [fingerprint],
        ),
        returnValue: _i14.Future<_i6.LxdImage>.value(_FakeLxdImage_5(
          this,
          Invocation.method(
            #getImage,
            [fingerprint],
          ),
        )),
      ) as _i14.Future<_i6.LxdImage>);
  @override
  _i14.Future<List<String>> getInstances() => (super.noSuchMethod(
        Invocation.method(
          #getInstances,
          [],
        ),
        returnValue: _i14.Future<List<String>>.value(<String>[]),
      ) as _i14.Future<List<String>>);
  @override
  _i14.Future<_i7.LxdInstance> getInstance(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getInstance,
          [name],
        ),
        returnValue: _i14.Future<_i7.LxdInstance>.value(_FakeLxdInstance_6(
          this,
          Invocation.method(
            #getInstance,
            [name],
          ),
        )),
      ) as _i14.Future<_i7.LxdInstance>);
  @override
  _i14.Future<_i8.LxdInstanceState> getInstanceState(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInstanceState,
          [name],
        ),
        returnValue:
            _i14.Future<_i8.LxdInstanceState>.value(_FakeLxdInstanceState_7(
          this,
          Invocation.method(
            #getInstanceState,
            [name],
          ),
        )),
      ) as _i14.Future<_i8.LxdInstanceState>);
  @override
  _i14.Future<_i2.LxdOperation> createInstance({
    String? architecture,
    Map<String, String>? config,
    Map<String, Map<String, String>>? devices,
    bool? ephemeral,
    List<String>? profiles,
    String? restore,
    bool? stateful,
    String? description,
    String? name,
    _i6.LxdImage? source,
    String? server,
    String? instanceType,
    _i6.LxdImageType? type,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createInstance,
          [],
          {
            #architecture: architecture,
            #config: config,
            #devices: devices,
            #ephemeral: ephemeral,
            #profiles: profiles,
            #restore: restore,
            #stateful: stateful,
            #description: description,
            #name: name,
            #source: source,
            #server: server,
            #instanceType: instanceType,
            #type: type,
          },
        ),
        returnValue: _i14.Future<_i2.LxdOperation>.value(_FakeLxdOperation_1(
          this,
          Invocation.method(
            #createInstance,
            [],
            {
              #architecture: architecture,
              #config: config,
              #devices: devices,
              #ephemeral: ephemeral,
              #profiles: profiles,
              #restore: restore,
              #stateful: stateful,
              #description: description,
              #name: name,
              #source: source,
              #server: server,
              #instanceType: instanceType,
              #type: type,
            },
          ),
        )),
      ) as _i14.Future<_i2.LxdOperation>);
  @override
  _i14.Future<_i2.LxdOperation> startInstance(
    String? name, {
    bool? force = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startInstance,
          [name],
          {#force: force},
        ),
        returnValue: _i14.Future<_i2.LxdOperation>.value(_FakeLxdOperation_1(
          this,
          Invocation.method(
            #startInstance,
            [name],
            {#force: force},
          ),
        )),
      ) as _i14.Future<_i2.LxdOperation>);
  @override
  _i14.Future<_i2.LxdOperation> execInstance(
    String? name, {
    List<String>? command,
    String? workingDirectory,
    Map<String, String>? environment,
    int? user,
    int? group,
    bool? interactive,
    bool? recordOutput,
    int? width,
    int? height,
    bool? waitForWebSocket,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execInstance,
          [name],
          {
            #command: command,
            #workingDirectory: workingDirectory,
            #environment: environment,
            #user: user,
            #group: group,
            #interactive: interactive,
            #recordOutput: recordOutput,
            #width: width,
            #height: height,
            #waitForWebSocket: waitForWebSocket,
          },
        ),
        returnValue: _i14.Future<_i2.LxdOperation>.value(_FakeLxdOperation_1(
          this,
          Invocation.method(
            #execInstance,
            [name],
            {
              #command: command,
              #workingDirectory: workingDirectory,
              #environment: environment,
              #user: user,
              #group: group,
              #interactive: interactive,
              #recordOutput: recordOutput,
              #width: width,
              #height: height,
              #waitForWebSocket: waitForWebSocket,
            },
          ),
        )),
      ) as _i14.Future<_i2.LxdOperation>);
  @override
  _i14.Future<_i2.LxdOperation> updateInstance(_i7.LxdInstance? instance) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateInstance,
          [instance],
        ),
        returnValue: _i14.Future<_i2.LxdOperation>.value(_FakeLxdOperation_1(
          this,
          Invocation.method(
            #updateInstance,
            [instance],
          ),
        )),
      ) as _i14.Future<_i2.LxdOperation>);
  @override
  _i14.Future<_i2.LxdOperation> stopInstance(
    String? name, {
    bool? force = false,
    Duration? timeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #stopInstance,
          [name],
          {
            #force: force,
            #timeout: timeout,
          },
        ),
        returnValue: _i14.Future<_i2.LxdOperation>.value(_FakeLxdOperation_1(
          this,
          Invocation.method(
            #stopInstance,
            [name],
            {
              #force: force,
              #timeout: timeout,
            },
          ),
        )),
      ) as _i14.Future<_i2.LxdOperation>);
  @override
  _i14.Future<_i2.LxdOperation> restartInstance(
    String? name, {
    bool? force = false,
    Duration? timeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restartInstance,
          [name],
          {
            #force: force,
            #timeout: timeout,
          },
        ),
        returnValue: _i14.Future<_i2.LxdOperation>.value(_FakeLxdOperation_1(
          this,
          Invocation.method(
            #restartInstance,
            [name],
            {
              #force: force,
              #timeout: timeout,
            },
          ),
        )),
      ) as _i14.Future<_i2.LxdOperation>);
  @override
  _i14.Future<_i2.LxdOperation> deleteInstance(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteInstance,
          [name],
        ),
        returnValue: _i14.Future<_i2.LxdOperation>.value(_FakeLxdOperation_1(
          this,
          Invocation.method(
            #deleteInstance,
            [name],
          ),
        )),
      ) as _i14.Future<_i2.LxdOperation>);
  @override
  _i14.Future<String> pullFile(
    String? instance, {
    String? path,
    String? project,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pullFile,
          [instance],
          {
            #path: path,
            #project: project,
          },
        ),
        returnValue: _i14.Future<String>.value(''),
      ) as _i14.Future<String>);
  @override
  _i14.Future<void> deleteFile(
    String? instance, {
    String? path,
    String? project,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [instance],
          {
            #path: path,
            #project: project,
          },
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> pushFile(
    String? instance, {
    String? path,
    String? project,
    String? data,
    int? uid,
    int? gid,
    String? mode,
    _i17.LxdFileType? type,
    _i17.LxdWriteMode? write,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushFile,
          [instance],
          {
            #path: path,
            #project: project,
            #data: data,
            #uid: uid,
            #gid: gid,
            #mode: mode,
            #type: type,
            #write: write,
          },
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<List<String>> getNetworks() => (super.noSuchMethod(
        Invocation.method(
          #getNetworks,
          [],
        ),
        returnValue: _i14.Future<List<String>>.value(<String>[]),
      ) as _i14.Future<List<String>>);
  @override
  _i14.Future<_i9.LxdNetwork> getNetwork(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getNetwork,
          [name],
        ),
        returnValue: _i14.Future<_i9.LxdNetwork>.value(_FakeLxdNetwork_8(
          this,
          Invocation.method(
            #getNetwork,
            [name],
          ),
        )),
      ) as _i14.Future<_i9.LxdNetwork>);
  @override
  _i14.Future<List<_i9.LxdNetworkLease>> getNetworkLeases(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNetworkLeases,
          [name],
        ),
        returnValue: _i14.Future<List<_i9.LxdNetworkLease>>.value(
            <_i9.LxdNetworkLease>[]),
      ) as _i14.Future<List<_i9.LxdNetworkLease>>);
  @override
  _i14.Future<_i9.LxdNetworkState> getNetworkState(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNetworkState,
          [name],
        ),
        returnValue:
            _i14.Future<_i9.LxdNetworkState>.value(_FakeLxdNetworkState_9(
          this,
          Invocation.method(
            #getNetworkState,
            [name],
          ),
        )),
      ) as _i14.Future<_i9.LxdNetworkState>);
  @override
  _i14.Future<List<String>> getNetworkAcls() => (super.noSuchMethod(
        Invocation.method(
          #getNetworkAcls,
          [],
        ),
        returnValue: _i14.Future<List<String>>.value(<String>[]),
      ) as _i14.Future<List<String>>);
  @override
  _i14.Future<_i10.LxdNetworkAcl> getNetworkAcl(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNetworkAcl,
          [name],
        ),
        returnValue:
            _i14.Future<_i10.LxdNetworkAcl>.value(_FakeLxdNetworkAcl_10(
          this,
          Invocation.method(
            #getNetworkAcl,
            [name],
          ),
        )),
      ) as _i14.Future<_i10.LxdNetworkAcl>);
  @override
  _i14.Future<List<String>> getProfiles() => (super.noSuchMethod(
        Invocation.method(
          #getProfiles,
          [],
        ),
        returnValue: _i14.Future<List<String>>.value(<String>[]),
      ) as _i14.Future<List<String>>);
  @override
  _i14.Future<_i11.LxdProfile> getProfile(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getProfile,
          [name],
        ),
        returnValue: _i14.Future<_i11.LxdProfile>.value(_FakeLxdProfile_11(
          this,
          Invocation.method(
            #getProfile,
            [name],
          ),
        )),
      ) as _i14.Future<_i11.LxdProfile>);
  @override
  _i14.Future<List<String>> getProjects() => (super.noSuchMethod(
        Invocation.method(
          #getProjects,
          [],
        ),
        returnValue: _i14.Future<List<String>>.value(<String>[]),
      ) as _i14.Future<List<String>>);
  @override
  _i14.Future<_i12.LxdProject> getProject(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getProject,
          [name],
        ),
        returnValue: _i14.Future<_i12.LxdProject>.value(_FakeLxdProject_12(
          this,
          Invocation.method(
            #getProject,
            [name],
          ),
        )),
      ) as _i14.Future<_i12.LxdProject>);
  @override
  _i14.Future<List<String>> getStoragePools() => (super.noSuchMethod(
        Invocation.method(
          #getStoragePools,
          [],
        ),
        returnValue: _i14.Future<List<String>>.value(<String>[]),
      ) as _i14.Future<List<String>>);
  @override
  _i14.Future<_i13.LxdStoragePool> getStoragePool(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoragePool,
          [name],
        ),
        returnValue:
            _i14.Future<_i13.LxdStoragePool>.value(_FakeLxdStoragePool_13(
          this,
          Invocation.method(
            #getStoragePool,
            [name],
          ),
        )),
      ) as _i14.Future<_i13.LxdStoragePool>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LxdInstance].
///
/// See the documentation for Mockito's code generation for more information.
class MockLxdInstance extends _i1.Mock implements _i7.LxdInstance {
  MockLxdInstance() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get architecture => (super.noSuchMethod(
        Invocation.getter(#architecture),
        returnValue: '',
      ) as String);
  @override
  Map<String, String> get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: <String, String>{},
      ) as Map<String, String>);
  @override
  Map<String, Map<String, String>> get devices => (super.noSuchMethod(
        Invocation.getter(#devices),
        returnValue: <String, Map<String, String>>{},
      ) as Map<String, Map<String, String>>);
  @override
  bool get ephemeral => (super.noSuchMethod(
        Invocation.getter(#ephemeral),
        returnValue: false,
      ) as bool);
  @override
  List<String> get profiles => (super.noSuchMethod(
        Invocation.getter(#profiles),
        returnValue: <String>[],
      ) as List<String>);
  @override
  bool get stateful => (super.noSuchMethod(
        Invocation.getter(#stateful),
        returnValue: false,
      ) as bool);
  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: '',
      ) as String);
  @override
  DateTime get createdAt => (super.noSuchMethod(
        Invocation.getter(#createdAt),
        returnValue: _FakeDateTime_14(
          this,
          Invocation.getter(#createdAt),
        ),
      ) as DateTime);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
      ) as String);
  @override
  String get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: '',
      ) as String);
  @override
  int get statusCode => (super.noSuchMethod(
        Invocation.getter(#statusCode),
        returnValue: 0,
      ) as int);
  @override
  DateTime get lastUsedAt => (super.noSuchMethod(
        Invocation.getter(#lastUsedAt),
        returnValue: _FakeDateTime_14(
          this,
          Invocation.getter(#lastUsedAt),
        ),
      ) as DateTime);
  @override
  String get location => (super.noSuchMethod(
        Invocation.getter(#location),
        returnValue: '',
      ) as String);
  @override
  _i7.LxdInstanceType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i7.LxdInstanceType.container,
      ) as _i7.LxdInstanceType);
  @override
  String get project => (super.noSuchMethod(
        Invocation.getter(#project),
        returnValue: '',
      ) as String);
  @override
  _i7.$LxdInstanceCopyWith<_i7.LxdInstance> get copyWith => (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$LxdInstanceCopyWith_15<_i7.LxdInstance>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i7.$LxdInstanceCopyWith<_i7.LxdInstance>);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [LxdOperation].
///
/// See the documentation for Mockito's code generation for more information.
class MockLxdOperation extends _i1.Mock implements _i2.LxdOperation {
  MockLxdOperation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);
  @override
  _i2.LxdOperationType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i2.LxdOperationType.task,
      ) as _i2.LxdOperationType);
  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: '',
      ) as String);
  @override
  DateTime get createdAt => (super.noSuchMethod(
        Invocation.getter(#createdAt),
        returnValue: _FakeDateTime_14(
          this,
          Invocation.getter(#createdAt),
        ),
      ) as DateTime);
  @override
  DateTime get updatedAt => (super.noSuchMethod(
        Invocation.getter(#updatedAt),
        returnValue: _FakeDateTime_14(
          this,
          Invocation.getter(#updatedAt),
        ),
      ) as DateTime);
  @override
  String get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: '',
      ) as String);
  @override
  int get statusCode => (super.noSuchMethod(
        Invocation.getter(#statusCode),
        returnValue: 0,
      ) as int);
  @override
  bool get mayCancel => (super.noSuchMethod(
        Invocation.getter(#mayCancel),
        returnValue: false,
      ) as bool);
  @override
  String get error => (super.noSuchMethod(
        Invocation.getter(#error),
        returnValue: '',
      ) as String);
  @override
  String get location => (super.noSuchMethod(
        Invocation.getter(#location),
        returnValue: '',
      ) as String);
  @override
  _i2.$LxdOperationCopyWith<_i2.LxdOperation> get copyWith =>
      (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$LxdOperationCopyWith_16<_i2.LxdOperation>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i2.$LxdOperationCopyWith<_i2.LxdOperation>);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [WebSocket].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocket extends _i1.Mock implements _i3.WebSocket {
  MockWebSocket() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set pingInterval(Duration? _pingInterval) => super.noSuchMethod(
        Invocation.setter(
          #pingInterval,
          _pingInterval,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get readyState => (super.noSuchMethod(
        Invocation.getter(#readyState),
        returnValue: 0,
      ) as int);
  @override
  String get extensions => (super.noSuchMethod(
        Invocation.getter(#extensions),
        returnValue: '',
      ) as String);
  @override
  bool get isBroadcast => (super.noSuchMethod(
        Invocation.getter(#isBroadcast),
        returnValue: false,
      ) as bool);
  @override
  _i14.Future<int> get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: _i14.Future<int>.value(0),
      ) as _i14.Future<int>);
  @override
  _i14.Future<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);
  @override
  _i14.Future<dynamic> get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  _i14.Future<dynamic> get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  _i14.Future<dynamic> get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  _i14.Future<dynamic> get done => (super.noSuchMethod(
        Invocation.getter(#done),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  _i14.Future<dynamic> close([
    int? code,
    String? reason,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #close,
          [
            code,
            reason,
          ],
        ),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  void add(dynamic data) => super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Future<dynamic> addStream(_i14.Stream<dynamic>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStream,
          [stream],
        ),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  void addUtf8Text(List<int>? bytes) => super.noSuchMethod(
        Invocation.method(
          #addUtf8Text,
          [bytes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Stream<dynamic> asBroadcastStream({
    void Function(_i14.StreamSubscription<dynamic>)? onListen,
    void Function(_i14.StreamSubscription<dynamic>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asBroadcastStream,
          [],
          {
            #onListen: onListen,
            #onCancel: onCancel,
          },
        ),
        returnValue: _i14.Stream<dynamic>.empty(),
      ) as _i14.Stream<dynamic>);
  @override
  _i14.StreamSubscription<dynamic> listen(
    void Function(dynamic)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_17<dynamic>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i14.StreamSubscription<dynamic>);
  @override
  _i14.Stream<dynamic> where(bool Function(dynamic)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: _i14.Stream<dynamic>.empty(),
      ) as _i14.Stream<dynamic>);
  @override
  _i14.Stream<S> map<S>(S Function(dynamic)? convert) => (super.noSuchMethod(
        Invocation.method(
          #map,
          [convert],
        ),
        returnValue: _i14.Stream<S>.empty(),
      ) as _i14.Stream<S>);
  @override
  _i14.Stream<E> asyncMap<E>(_i14.FutureOr<E> Function(dynamic)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [convert],
        ),
        returnValue: _i14.Stream<E>.empty(),
      ) as _i14.Stream<E>);
  @override
  _i14.Stream<E> asyncExpand<E>(_i14.Stream<E>? Function(dynamic)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncExpand,
          [convert],
        ),
        returnValue: _i14.Stream<E>.empty(),
      ) as _i14.Stream<E>);
  @override
  _i14.Stream<dynamic> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [onError],
          {#test: test},
        ),
        returnValue: _i14.Stream<dynamic>.empty(),
      ) as _i14.Stream<dynamic>);
  @override
  _i14.Stream<S> expand<S>(Iterable<S> Function(dynamic)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [convert],
        ),
        returnValue: _i14.Stream<S>.empty(),
      ) as _i14.Stream<S>);
  @override
  _i14.Future<dynamic> pipe(_i14.StreamConsumer<dynamic>? streamConsumer) =>
      (super.noSuchMethod(
        Invocation.method(
          #pipe,
          [streamConsumer],
        ),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  _i14.Stream<S> transform<S>(
          _i14.StreamTransformer<dynamic, S>? streamTransformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transform,
          [streamTransformer],
        ),
        returnValue: _i14.Stream<S>.empty(),
      ) as _i14.Stream<S>);
  @override
  _i14.Future<dynamic> reduce(
          dynamic Function(
    dynamic,
    dynamic,
  )?
              combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  _i14.Future<S> fold<S>(
    S? initialValue,
    S Function(
      S,
      dynamic,
    )?
        combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i14.Future<S>.value(null),
      ) as _i14.Future<S>);
  @override
  _i14.Future<String> join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i14.Future<String>.value(''),
      ) as _i14.Future<String>);
  @override
  _i14.Future<bool> contains(Object? needle) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [needle],
        ),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);
  @override
  _i14.Future<dynamic> forEach(void Function(dynamic)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  _i14.Future<bool> every(bool Function(dynamic)? test) => (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);
  @override
  _i14.Future<bool> any(bool Function(dynamic)? test) => (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);
  @override
  _i14.Stream<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _i14.Stream<R>.empty(),
      ) as _i14.Stream<R>);
  @override
  _i14.Future<List<dynamic>> toList() => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
        ),
        returnValue: _i14.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i14.Future<List<dynamic>>);
  @override
  _i14.Future<Set<dynamic>> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: _i14.Future<Set<dynamic>>.value(<dynamic>{}),
      ) as _i14.Future<Set<dynamic>>);
  @override
  _i14.Future<E> drain<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #drain,
          [futureValue],
        ),
        returnValue: _i14.Future<E>.value(null),
      ) as _i14.Future<E>);
  @override
  _i14.Stream<dynamic> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: _i14.Stream<dynamic>.empty(),
      ) as _i14.Stream<dynamic>);
  @override
  _i14.Stream<dynamic> takeWhile(bool Function(dynamic)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: _i14.Stream<dynamic>.empty(),
      ) as _i14.Stream<dynamic>);
  @override
  _i14.Stream<dynamic> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: _i14.Stream<dynamic>.empty(),
      ) as _i14.Stream<dynamic>);
  @override
  _i14.Stream<dynamic> skipWhile(bool Function(dynamic)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: _i14.Stream<dynamic>.empty(),
      ) as _i14.Stream<dynamic>);
  @override
  _i14.Stream<dynamic> distinct(
          [bool Function(
            dynamic,
            dynamic,
          )?
              equals]) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [equals],
        ),
        returnValue: _i14.Stream<dynamic>.empty(),
      ) as _i14.Stream<dynamic>);
  @override
  _i14.Future<dynamic> firstWhere(
    bool Function(dynamic)? test, {
    dynamic Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  _i14.Future<dynamic> lastWhere(
    bool Function(dynamic)? test, {
    dynamic Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  _i14.Future<dynamic> singleWhere(
    bool Function(dynamic)? test, {
    dynamic Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  _i14.Future<dynamic> elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  _i14.Stream<dynamic> timeout(
    Duration? timeLimit, {
    void Function(_i14.EventSink<dynamic>)? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i14.Stream<dynamic>.empty(),
      ) as _i14.Stream<dynamic>);
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
