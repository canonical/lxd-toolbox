// Mocks generated by Mockito 5.3.2 from annotations
// in settings_store/test/settings_store_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:jsettings/src/jsettings.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [JSettings].
///
/// See the documentation for Mockito's code generation for more information.
class MockJSettings extends _i1.Mock implements _i2.JSettings {
  MockJSettings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);
  @override
  _i3.Stream<String> get added => (super.noSuchMethod(
        Invocation.getter(#added),
        returnValue: _i3.Stream<String>.empty(),
      ) as _i3.Stream<String>);
  @override
  _i3.Stream<String> get changed => (super.noSuchMethod(
        Invocation.getter(#changed),
        returnValue: _i3.Stream<String>.empty(),
      ) as _i3.Stream<String>);
  @override
  _i3.Stream<String> get removed => (super.noSuchMethod(
        Invocation.getter(#removed),
        returnValue: _i3.Stream<String>.empty(),
      ) as _i3.Stream<String>);
  @override
  _i3.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);
  @override
  bool hasValue(String? key) => (super.noSuchMethod(
        Invocation.method(
          #hasValue,
          [key],
        ),
        returnValue: false,
      ) as bool);
  @override
  bool valueEquals(
    Object? a,
    Object? b,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #valueEquals,
          [
            a,
            b,
          ],
        ),
        returnValue: false,
      ) as bool);
  @override
  Map<String, Object> getValues() => (super.noSuchMethod(
        Invocation.method(
          #getValues,
          [],
        ),
        returnValue: <String, Object>{},
      ) as Map<String, Object>);
  @override
  Object? getValue(String? key) => (super.noSuchMethod(Invocation.method(
        #getValue,
        [key],
      )) as Object?);
  @override
  _i3.Future<void> setValue(
    String? key,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setValue,
          [
            key,
            value,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> resetValue(String? key) => (super.noSuchMethod(
        Invocation.method(
          #resetValue,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
